// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/Hidayathamir/golang-clean-architecture/internal/entity"
	"github.com/Hidayathamir/golang-clean-architecture/internal/model"
	"github.com/Hidayathamir/golang-clean-architecture/internal/repository"
	"gorm.io/gorm"
	"sync"
)

// Ensure, that TodoRepositoryMock does implement repository.TodoRepository.
// If this is not the case, regenerate this file with moq.
var _ repository.TodoRepository = &TodoRepositoryMock{}

// TodoRepositoryMock is a mock implementation of repository.TodoRepository.
//
//	func TestSomethingThatUsesTodoRepository(t *testing.T) {
//
//		// make and configure a mocked repository.TodoRepository
//		mockedTodoRepository := &TodoRepositoryMock{
//			CreateFunc: func(ctx context.Context, db *gorm.DB, todo *entity.Todo) error {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, db *gorm.DB, todo *entity.Todo) error {
//				panic("mock out the Delete method")
//			},
//			FindByIDAndUserIDFunc: func(ctx context.Context, db *gorm.DB, todo *entity.Todo, id string, userID string) error {
//				panic("mock out the FindByIDAndUserID method")
//			},
//			ListFunc: func(ctx context.Context, db *gorm.DB, req *model.ListTodoRequest) (entity.TodoList, int64, error) {
//				panic("mock out the List method")
//			},
//			UpdateFunc: func(ctx context.Context, db *gorm.DB, todo *entity.Todo) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedTodoRepository in code that requires repository.TodoRepository
//		// and then make assertions.
//
//	}
type TodoRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, db *gorm.DB, todo *entity.Todo) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, db *gorm.DB, todo *entity.Todo) error

	// FindByIDAndUserIDFunc mocks the FindByIDAndUserID method.
	FindByIDAndUserIDFunc func(ctx context.Context, db *gorm.DB, todo *entity.Todo, id string, userID string) error

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, db *gorm.DB, req *model.ListTodoRequest) (entity.TodoList, int64, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, db *gorm.DB, todo *entity.Todo) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// Todo is the todo argument value.
			Todo *entity.Todo
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// Todo is the todo argument value.
			Todo *entity.Todo
		}
		// FindByIDAndUserID holds details about calls to the FindByIDAndUserID method.
		FindByIDAndUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// Todo is the todo argument value.
			Todo *entity.Todo
			// ID is the id argument value.
			ID string
			// UserID is the userID argument value.
			UserID string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// Req is the req argument value.
			Req *model.ListTodoRequest
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// Todo is the todo argument value.
			Todo *entity.Todo
		}
	}
	lockCreate            sync.RWMutex
	lockDelete            sync.RWMutex
	lockFindByIDAndUserID sync.RWMutex
	lockList              sync.RWMutex
	lockUpdate            sync.RWMutex
}

// Create calls CreateFunc.
func (mock *TodoRepositoryMock) Create(ctx context.Context, db *gorm.DB, todo *entity.Todo) error {
	if mock.CreateFunc == nil {
		panic("TodoRepositoryMock.CreateFunc: method is nil but TodoRepository.Create was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Db   *gorm.DB
		Todo *entity.Todo
	}{
		Ctx:  ctx,
		Db:   db,
		Todo: todo,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, db, todo)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedTodoRepository.CreateCalls())
func (mock *TodoRepositoryMock) CreateCalls() []struct {
	Ctx  context.Context
	Db   *gorm.DB
	Todo *entity.Todo
} {
	var calls []struct {
		Ctx  context.Context
		Db   *gorm.DB
		Todo *entity.Todo
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *TodoRepositoryMock) Delete(ctx context.Context, db *gorm.DB, todo *entity.Todo) error {
	if mock.DeleteFunc == nil {
		panic("TodoRepositoryMock.DeleteFunc: method is nil but TodoRepository.Delete was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Db   *gorm.DB
		Todo *entity.Todo
	}{
		Ctx:  ctx,
		Db:   db,
		Todo: todo,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, db, todo)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedTodoRepository.DeleteCalls())
func (mock *TodoRepositoryMock) DeleteCalls() []struct {
	Ctx  context.Context
	Db   *gorm.DB
	Todo *entity.Todo
} {
	var calls []struct {
		Ctx  context.Context
		Db   *gorm.DB
		Todo *entity.Todo
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// FindByIDAndUserID calls FindByIDAndUserIDFunc.
func (mock *TodoRepositoryMock) FindByIDAndUserID(ctx context.Context, db *gorm.DB, todo *entity.Todo, id string, userID string) error {
	if mock.FindByIDAndUserIDFunc == nil {
		panic("TodoRepositoryMock.FindByIDAndUserIDFunc: method is nil but TodoRepository.FindByIDAndUserID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Db     *gorm.DB
		Todo   *entity.Todo
		ID     string
		UserID string
	}{
		Ctx:    ctx,
		Db:     db,
		Todo:   todo,
		ID:     id,
		UserID: userID,
	}
	mock.lockFindByIDAndUserID.Lock()
	mock.calls.FindByIDAndUserID = append(mock.calls.FindByIDAndUserID, callInfo)
	mock.lockFindByIDAndUserID.Unlock()
	return mock.FindByIDAndUserIDFunc(ctx, db, todo, id, userID)
}

// FindByIDAndUserIDCalls gets all the calls that were made to FindByIDAndUserID.
// Check the length with:
//
//	len(mockedTodoRepository.FindByIDAndUserIDCalls())
func (mock *TodoRepositoryMock) FindByIDAndUserIDCalls() []struct {
	Ctx    context.Context
	Db     *gorm.DB
	Todo   *entity.Todo
	ID     string
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		Db     *gorm.DB
		Todo   *entity.Todo
		ID     string
		UserID string
	}
	mock.lockFindByIDAndUserID.RLock()
	calls = mock.calls.FindByIDAndUserID
	mock.lockFindByIDAndUserID.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *TodoRepositoryMock) List(ctx context.Context, db *gorm.DB, req *model.ListTodoRequest) (entity.TodoList, int64, error) {
	if mock.ListFunc == nil {
		panic("TodoRepositoryMock.ListFunc: method is nil but TodoRepository.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  *gorm.DB
		Req *model.ListTodoRequest
	}{
		Ctx: ctx,
		Db:  db,
		Req: req,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, db, req)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedTodoRepository.ListCalls())
func (mock *TodoRepositoryMock) ListCalls() []struct {
	Ctx context.Context
	Db  *gorm.DB
	Req *model.ListTodoRequest
} {
	var calls []struct {
		Ctx context.Context
		Db  *gorm.DB
		Req *model.ListTodoRequest
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *TodoRepositoryMock) Update(ctx context.Context, db *gorm.DB, todo *entity.Todo) error {
	if mock.UpdateFunc == nil {
		panic("TodoRepositoryMock.UpdateFunc: method is nil but TodoRepository.Update was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Db   *gorm.DB
		Todo *entity.Todo
	}{
		Ctx:  ctx,
		Db:   db,
		Todo: todo,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, db, todo)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedTodoRepository.UpdateCalls())
func (mock *TodoRepositoryMock) UpdateCalls() []struct {
	Ctx  context.Context
	Db   *gorm.DB
	Todo *entity.Todo
} {
	var calls []struct {
		Ctx  context.Context
		Db   *gorm.DB
		Todo *entity.Todo
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
