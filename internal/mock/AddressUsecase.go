// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"golang-clean-architecture/internal/model"
	"golang-clean-architecture/internal/usecase/address"
	"sync"
)

// Ensure, that AddressUsecaseMock does implement address.AddressUsecase.
// If this is not the case, regenerate this file with moq.
var _ address.AddressUsecase = &AddressUsecaseMock{}

// AddressUsecaseMock is a mock implementation of address.AddressUsecase.
//
//	func TestSomethingThatUsesAddressUsecase(t *testing.T) {
//
//		// make and configure a mocked address.AddressUsecase
//		mockedAddressUsecase := &AddressUsecaseMock{
//			CreateFunc: func(ctx context.Context, req *model.CreateAddressRequest) (*model.AddressResponse, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, req *model.DeleteAddressRequest) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context, req *model.GetAddressRequest) (*model.AddressResponse, error) {
//				panic("mock out the Get method")
//			},
//			ListFunc: func(ctx context.Context, req *model.ListAddressRequest) ([]model.AddressResponse, error) {
//				panic("mock out the List method")
//			},
//			UpdateFunc: func(ctx context.Context, req *model.UpdateAddressRequest) (*model.AddressResponse, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedAddressUsecase in code that requires address.AddressUsecase
//		// and then make assertions.
//
//	}
type AddressUsecaseMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, req *model.CreateAddressRequest) (*model.AddressResponse, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, req *model.DeleteAddressRequest) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, req *model.GetAddressRequest) (*model.AddressResponse, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, req *model.ListAddressRequest) ([]model.AddressResponse, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, req *model.UpdateAddressRequest) (*model.AddressResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.CreateAddressRequest
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.DeleteAddressRequest
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.GetAddressRequest
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.ListAddressRequest
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.UpdateAddressRequest
		}
	}
	lockCreate sync.RWMutex
	lockDelete sync.RWMutex
	lockGet    sync.RWMutex
	lockList   sync.RWMutex
	lockUpdate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *AddressUsecaseMock) Create(ctx context.Context, req *model.CreateAddressRequest) (*model.AddressResponse, error) {
	if mock.CreateFunc == nil {
		panic("AddressUsecaseMock.CreateFunc: method is nil but AddressUsecase.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.CreateAddressRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, req)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedAddressUsecase.CreateCalls())
func (mock *AddressUsecaseMock) CreateCalls() []struct {
	Ctx context.Context
	Req *model.CreateAddressRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.CreateAddressRequest
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *AddressUsecaseMock) Delete(ctx context.Context, req *model.DeleteAddressRequest) error {
	if mock.DeleteFunc == nil {
		panic("AddressUsecaseMock.DeleteFunc: method is nil but AddressUsecase.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.DeleteAddressRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, req)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedAddressUsecase.DeleteCalls())
func (mock *AddressUsecaseMock) DeleteCalls() []struct {
	Ctx context.Context
	Req *model.DeleteAddressRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.DeleteAddressRequest
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *AddressUsecaseMock) Get(ctx context.Context, req *model.GetAddressRequest) (*model.AddressResponse, error) {
	if mock.GetFunc == nil {
		panic("AddressUsecaseMock.GetFunc: method is nil but AddressUsecase.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.GetAddressRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, req)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedAddressUsecase.GetCalls())
func (mock *AddressUsecaseMock) GetCalls() []struct {
	Ctx context.Context
	Req *model.GetAddressRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.GetAddressRequest
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *AddressUsecaseMock) List(ctx context.Context, req *model.ListAddressRequest) ([]model.AddressResponse, error) {
	if mock.ListFunc == nil {
		panic("AddressUsecaseMock.ListFunc: method is nil but AddressUsecase.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.ListAddressRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, req)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedAddressUsecase.ListCalls())
func (mock *AddressUsecaseMock) ListCalls() []struct {
	Ctx context.Context
	Req *model.ListAddressRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.ListAddressRequest
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *AddressUsecaseMock) Update(ctx context.Context, req *model.UpdateAddressRequest) (*model.AddressResponse, error) {
	if mock.UpdateFunc == nil {
		panic("AddressUsecaseMock.UpdateFunc: method is nil but AddressUsecase.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.UpdateAddressRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, req)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedAddressUsecase.UpdateCalls())
func (mock *AddressUsecaseMock) UpdateCalls() []struct {
	Ctx context.Context
	Req *model.UpdateAddressRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.UpdateAddressRequest
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
