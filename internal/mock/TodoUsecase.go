// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/Hidayathamir/golang-clean-architecture/internal/model"
	"github.com/Hidayathamir/golang-clean-architecture/internal/usecase/todo"
	"sync"
)

// Ensure, that TodoUsecaseMock does implement todo.TodoUsecase.
// If this is not the case, regenerate this file with moq.
var _ todo.TodoUsecase = &TodoUsecaseMock{}

// TodoUsecaseMock is a mock implementation of todo.TodoUsecase.
//
//	func TestSomethingThatUsesTodoUsecase(t *testing.T) {
//
//		// make and configure a mocked todo.TodoUsecase
//		mockedTodoUsecase := &TodoUsecaseMock{
//			CompleteFunc: func(ctx context.Context, req *model.CompleteTodoRequest) (*model.TodoResponse, error) {
//				panic("mock out the Complete method")
//			},
//			CreateFunc: func(ctx context.Context, req *model.CreateTodoRequest) (*model.TodoResponse, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, req *model.DeleteTodoRequest) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context, req *model.GetTodoRequest) (*model.TodoResponse, error) {
//				panic("mock out the Get method")
//			},
//			ListFunc: func(ctx context.Context, req *model.ListTodoRequest) ([]model.TodoResponse, int64, error) {
//				panic("mock out the List method")
//			},
//			UpdateFunc: func(ctx context.Context, req *model.UpdateTodoRequest) (*model.TodoResponse, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedTodoUsecase in code that requires todo.TodoUsecase
//		// and then make assertions.
//
//	}
type TodoUsecaseMock struct {
	// CompleteFunc mocks the Complete method.
	CompleteFunc func(ctx context.Context, req *model.CompleteTodoRequest) (*model.TodoResponse, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, req *model.CreateTodoRequest) (*model.TodoResponse, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, req *model.DeleteTodoRequest) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, req *model.GetTodoRequest) (*model.TodoResponse, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, req *model.ListTodoRequest) ([]model.TodoResponse, int64, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, req *model.UpdateTodoRequest) (*model.TodoResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Complete holds details about calls to the Complete method.
		Complete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.CompleteTodoRequest
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.CreateTodoRequest
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.DeleteTodoRequest
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.GetTodoRequest
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.ListTodoRequest
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.UpdateTodoRequest
		}
	}
	lockComplete sync.RWMutex
	lockCreate   sync.RWMutex
	lockDelete   sync.RWMutex
	lockGet      sync.RWMutex
	lockList     sync.RWMutex
	lockUpdate   sync.RWMutex
}

// Complete calls CompleteFunc.
func (mock *TodoUsecaseMock) Complete(ctx context.Context, req *model.CompleteTodoRequest) (*model.TodoResponse, error) {
	if mock.CompleteFunc == nil {
		panic("TodoUsecaseMock.CompleteFunc: method is nil but TodoUsecase.Complete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.CompleteTodoRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockComplete.Lock()
	mock.calls.Complete = append(mock.calls.Complete, callInfo)
	mock.lockComplete.Unlock()
	return mock.CompleteFunc(ctx, req)
}

// CompleteCalls gets all the calls that were made to Complete.
// Check the length with:
//
//	len(mockedTodoUsecase.CompleteCalls())
func (mock *TodoUsecaseMock) CompleteCalls() []struct {
	Ctx context.Context
	Req *model.CompleteTodoRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.CompleteTodoRequest
	}
	mock.lockComplete.RLock()
	calls = mock.calls.Complete
	mock.lockComplete.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *TodoUsecaseMock) Create(ctx context.Context, req *model.CreateTodoRequest) (*model.TodoResponse, error) {
	if mock.CreateFunc == nil {
		panic("TodoUsecaseMock.CreateFunc: method is nil but TodoUsecase.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.CreateTodoRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, req)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedTodoUsecase.CreateCalls())
func (mock *TodoUsecaseMock) CreateCalls() []struct {
	Ctx context.Context
	Req *model.CreateTodoRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.CreateTodoRequest
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *TodoUsecaseMock) Delete(ctx context.Context, req *model.DeleteTodoRequest) error {
	if mock.DeleteFunc == nil {
		panic("TodoUsecaseMock.DeleteFunc: method is nil but TodoUsecase.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.DeleteTodoRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, req)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedTodoUsecase.DeleteCalls())
func (mock *TodoUsecaseMock) DeleteCalls() []struct {
	Ctx context.Context
	Req *model.DeleteTodoRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.DeleteTodoRequest
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *TodoUsecaseMock) Get(ctx context.Context, req *model.GetTodoRequest) (*model.TodoResponse, error) {
	if mock.GetFunc == nil {
		panic("TodoUsecaseMock.GetFunc: method is nil but TodoUsecase.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.GetTodoRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, req)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedTodoUsecase.GetCalls())
func (mock *TodoUsecaseMock) GetCalls() []struct {
	Ctx context.Context
	Req *model.GetTodoRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.GetTodoRequest
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *TodoUsecaseMock) List(ctx context.Context, req *model.ListTodoRequest) ([]model.TodoResponse, int64, error) {
	if mock.ListFunc == nil {
		panic("TodoUsecaseMock.ListFunc: method is nil but TodoUsecase.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.ListTodoRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, req)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedTodoUsecase.ListCalls())
func (mock *TodoUsecaseMock) ListCalls() []struct {
	Ctx context.Context
	Req *model.ListTodoRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.ListTodoRequest
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *TodoUsecaseMock) Update(ctx context.Context, req *model.UpdateTodoRequest) (*model.TodoResponse, error) {
	if mock.UpdateFunc == nil {
		panic("TodoUsecaseMock.UpdateFunc: method is nil but TodoUsecase.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.UpdateTodoRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, req)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedTodoUsecase.UpdateCalls())
func (mock *TodoUsecaseMock) UpdateCalls() []struct {
	Ctx context.Context
	Req *model.UpdateTodoRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.UpdateTodoRequest
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
