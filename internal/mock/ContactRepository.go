// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/Hidayathamir/golang-clean-architecture/internal/entity"
	"github.com/Hidayathamir/golang-clean-architecture/internal/model"
	"github.com/Hidayathamir/golang-clean-architecture/internal/repository"
	"gorm.io/gorm"
	"sync"
)

// Ensure, that ContactRepositoryMock does implement repository.ContactRepository.
// If this is not the case, regenerate this file with moq.
var _ repository.ContactRepository = &ContactRepositoryMock{}

// ContactRepositoryMock is a mock implementation of repository.ContactRepository.
//
//	func TestSomethingThatUsesContactRepository(t *testing.T) {
//
//		// make and configure a mocked repository.ContactRepository
//		mockedContactRepository := &ContactRepositoryMock{
//			CreateFunc: func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Contact) error {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Contact) error {
//				panic("mock out the Delete method")
//			},
//			FindByIdAndUserIdFunc: func(ctx context.Context, db *gorm.DB, contact *entity.Contact, id string, userId string) error {
//				panic("mock out the FindByIdAndUserId method")
//			},
//			SearchFunc: func(ctx context.Context, db *gorm.DB, req *model.SearchContactRequest) ([]entity.Contact, int64, error) {
//				panic("mock out the Search method")
//			},
//			UpdateFunc: func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Contact) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedContactRepository in code that requires repository.ContactRepository
//		// and then make assertions.
//
//	}
type ContactRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Contact) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Contact) error

	// FindByIdAndUserIdFunc mocks the FindByIdAndUserId method.
	FindByIdAndUserIdFunc func(ctx context.Context, db *gorm.DB, contact *entity.Contact, id string, userId string) error

	// SearchFunc mocks the Search method.
	SearchFunc func(ctx context.Context, db *gorm.DB, req *model.SearchContactRequest) ([]entity.Contact, int64, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Contact) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// EntityMoqParam is the entityMoqParam argument value.
			EntityMoqParam *entity.Contact
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// EntityMoqParam is the entityMoqParam argument value.
			EntityMoqParam *entity.Contact
		}
		// FindByIdAndUserId holds details about calls to the FindByIdAndUserId method.
		FindByIdAndUserId []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// Contact is the contact argument value.
			Contact *entity.Contact
			// ID is the id argument value.
			ID string
			// UserId is the userId argument value.
			UserId string
		}
		// Search holds details about calls to the Search method.
		Search []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// Req is the req argument value.
			Req *model.SearchContactRequest
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// EntityMoqParam is the entityMoqParam argument value.
			EntityMoqParam *entity.Contact
		}
	}
	lockCreate            sync.RWMutex
	lockDelete            sync.RWMutex
	lockFindByIdAndUserId sync.RWMutex
	lockSearch            sync.RWMutex
	lockUpdate            sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ContactRepositoryMock) Create(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Contact) error {
	if mock.CreateFunc == nil {
		panic("ContactRepositoryMock.CreateFunc: method is nil but ContactRepository.Create was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.Contact
	}{
		Ctx:            ctx,
		Db:             db,
		EntityMoqParam: entityMoqParam,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, db, entityMoqParam)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedContactRepository.CreateCalls())
func (mock *ContactRepositoryMock) CreateCalls() []struct {
	Ctx            context.Context
	Db             *gorm.DB
	EntityMoqParam *entity.Contact
} {
	var calls []struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.Contact
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ContactRepositoryMock) Delete(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Contact) error {
	if mock.DeleteFunc == nil {
		panic("ContactRepositoryMock.DeleteFunc: method is nil but ContactRepository.Delete was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.Contact
	}{
		Ctx:            ctx,
		Db:             db,
		EntityMoqParam: entityMoqParam,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, db, entityMoqParam)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedContactRepository.DeleteCalls())
func (mock *ContactRepositoryMock) DeleteCalls() []struct {
	Ctx            context.Context
	Db             *gorm.DB
	EntityMoqParam *entity.Contact
} {
	var calls []struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.Contact
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// FindByIdAndUserId calls FindByIdAndUserIdFunc.
func (mock *ContactRepositoryMock) FindByIdAndUserId(ctx context.Context, db *gorm.DB, contact *entity.Contact, id string, userId string) error {
	if mock.FindByIdAndUserIdFunc == nil {
		panic("ContactRepositoryMock.FindByIdAndUserIdFunc: method is nil but ContactRepository.FindByIdAndUserId was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Db      *gorm.DB
		Contact *entity.Contact
		ID      string
		UserId  string
	}{
		Ctx:     ctx,
		Db:      db,
		Contact: contact,
		ID:      id,
		UserId:  userId,
	}
	mock.lockFindByIdAndUserId.Lock()
	mock.calls.FindByIdAndUserId = append(mock.calls.FindByIdAndUserId, callInfo)
	mock.lockFindByIdAndUserId.Unlock()
	return mock.FindByIdAndUserIdFunc(ctx, db, contact, id, userId)
}

// FindByIdAndUserIdCalls gets all the calls that were made to FindByIdAndUserId.
// Check the length with:
//
//	len(mockedContactRepository.FindByIdAndUserIdCalls())
func (mock *ContactRepositoryMock) FindByIdAndUserIdCalls() []struct {
	Ctx     context.Context
	Db      *gorm.DB
	Contact *entity.Contact
	ID      string
	UserId  string
} {
	var calls []struct {
		Ctx     context.Context
		Db      *gorm.DB
		Contact *entity.Contact
		ID      string
		UserId  string
	}
	mock.lockFindByIdAndUserId.RLock()
	calls = mock.calls.FindByIdAndUserId
	mock.lockFindByIdAndUserId.RUnlock()
	return calls
}

// Search calls SearchFunc.
func (mock *ContactRepositoryMock) Search(ctx context.Context, db *gorm.DB, req *model.SearchContactRequest) ([]entity.Contact, int64, error) {
	if mock.SearchFunc == nil {
		panic("ContactRepositoryMock.SearchFunc: method is nil but ContactRepository.Search was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  *gorm.DB
		Req *model.SearchContactRequest
	}{
		Ctx: ctx,
		Db:  db,
		Req: req,
	}
	mock.lockSearch.Lock()
	mock.calls.Search = append(mock.calls.Search, callInfo)
	mock.lockSearch.Unlock()
	return mock.SearchFunc(ctx, db, req)
}

// SearchCalls gets all the calls that were made to Search.
// Check the length with:
//
//	len(mockedContactRepository.SearchCalls())
func (mock *ContactRepositoryMock) SearchCalls() []struct {
	Ctx context.Context
	Db  *gorm.DB
	Req *model.SearchContactRequest
} {
	var calls []struct {
		Ctx context.Context
		Db  *gorm.DB
		Req *model.SearchContactRequest
	}
	mock.lockSearch.RLock()
	calls = mock.calls.Search
	mock.lockSearch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ContactRepositoryMock) Update(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Contact) error {
	if mock.UpdateFunc == nil {
		panic("ContactRepositoryMock.UpdateFunc: method is nil but ContactRepository.Update was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.Contact
	}{
		Ctx:            ctx,
		Db:             db,
		EntityMoqParam: entityMoqParam,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, db, entityMoqParam)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedContactRepository.UpdateCalls())
func (mock *ContactRepositoryMock) UpdateCalls() []struct {
	Ctx            context.Context
	Db             *gorm.DB
	EntityMoqParam *entity.Contact
} {
	var calls []struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.Contact
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
