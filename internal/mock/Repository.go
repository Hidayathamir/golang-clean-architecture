// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"golang-clean-architecture/internal/repository"
	"gorm.io/gorm"
	"sync"
)

// Ensure, that RepositoryMock does implement repository.Repository.
// If this is not the case, regenerate this file with moq.
var _ repository.Repository[any] = &RepositoryMock[any]{}

// RepositoryMock is a mock implementation of repository.Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked repository.Repository
//		mockedRepository := &RepositoryMock{
//			CountByIdFunc: func(db *gorm.DB, id any) (int64, error) {
//				panic("mock out the CountById method")
//			},
//			CreateFunc: func(db *gorm.DB, entity *T) error {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(db *gorm.DB, entity *T) error {
//				panic("mock out the Delete method")
//			},
//			FindByIdFunc: func(db *gorm.DB, entity *T, id any) error {
//				panic("mock out the FindById method")
//			},
//			UpdateFunc: func(db *gorm.DB, entity *T) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedRepository in code that requires repository.Repository
//		// and then make assertions.
//
//	}
type RepositoryMock[T any] struct {
	// CountByIdFunc mocks the CountById method.
	CountByIdFunc func(db *gorm.DB, id any) (int64, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(db *gorm.DB, entity *T) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(db *gorm.DB, entity *T) error

	// FindByIdFunc mocks the FindById method.
	FindByIdFunc func(db *gorm.DB, entity *T, id any) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(db *gorm.DB, entity *T) error

	// calls tracks calls to the methods.
	calls struct {
		// CountById holds details about calls to the CountById method.
		CountById []struct {
			// Db is the db argument value.
			Db *gorm.DB
			// ID is the id argument value.
			ID any
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Db is the db argument value.
			Db *gorm.DB
			// Entity is the entity argument value.
			Entity *T
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Db is the db argument value.
			Db *gorm.DB
			// Entity is the entity argument value.
			Entity *T
		}
		// FindById holds details about calls to the FindById method.
		FindById []struct {
			// Db is the db argument value.
			Db *gorm.DB
			// Entity is the entity argument value.
			Entity *T
			// ID is the id argument value.
			ID any
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Db is the db argument value.
			Db *gorm.DB
			// Entity is the entity argument value.
			Entity *T
		}
	}
	lockCountById sync.RWMutex
	lockCreate    sync.RWMutex
	lockDelete    sync.RWMutex
	lockFindById  sync.RWMutex
	lockUpdate    sync.RWMutex
}

// CountById calls CountByIdFunc.
func (mock *RepositoryMock[T]) CountById(db *gorm.DB, id any) (int64, error) {
	if mock.CountByIdFunc == nil {
		panic("RepositoryMock.CountByIdFunc: method is nil but Repository.CountById was just called")
	}
	callInfo := struct {
		Db *gorm.DB
		ID any
	}{
		Db: db,
		ID: id,
	}
	mock.lockCountById.Lock()
	mock.calls.CountById = append(mock.calls.CountById, callInfo)
	mock.lockCountById.Unlock()
	return mock.CountByIdFunc(db, id)
}

// CountByIdCalls gets all the calls that were made to CountById.
// Check the length with:
//
//	len(mockedRepository.CountByIdCalls())
func (mock *RepositoryMock[T]) CountByIdCalls() []struct {
	Db *gorm.DB
	ID any
} {
	var calls []struct {
		Db *gorm.DB
		ID any
	}
	mock.lockCountById.RLock()
	calls = mock.calls.CountById
	mock.lockCountById.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *RepositoryMock[T]) Create(db *gorm.DB, entity *T) error {
	if mock.CreateFunc == nil {
		panic("RepositoryMock.CreateFunc: method is nil but Repository.Create was just called")
	}
	callInfo := struct {
		Db     *gorm.DB
		Entity *T
	}{
		Db:     db,
		Entity: entity,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(db, entity)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedRepository.CreateCalls())
func (mock *RepositoryMock[T]) CreateCalls() []struct {
	Db     *gorm.DB
	Entity *T
} {
	var calls []struct {
		Db     *gorm.DB
		Entity *T
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RepositoryMock[T]) Delete(db *gorm.DB, entity *T) error {
	if mock.DeleteFunc == nil {
		panic("RepositoryMock.DeleteFunc: method is nil but Repository.Delete was just called")
	}
	callInfo := struct {
		Db     *gorm.DB
		Entity *T
	}{
		Db:     db,
		Entity: entity,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(db, entity)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedRepository.DeleteCalls())
func (mock *RepositoryMock[T]) DeleteCalls() []struct {
	Db     *gorm.DB
	Entity *T
} {
	var calls []struct {
		Db     *gorm.DB
		Entity *T
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// FindById calls FindByIdFunc.
func (mock *RepositoryMock[T]) FindById(db *gorm.DB, entity *T, id any) error {
	if mock.FindByIdFunc == nil {
		panic("RepositoryMock.FindByIdFunc: method is nil but Repository.FindById was just called")
	}
	callInfo := struct {
		Db     *gorm.DB
		Entity *T
		ID     any
	}{
		Db:     db,
		Entity: entity,
		ID:     id,
	}
	mock.lockFindById.Lock()
	mock.calls.FindById = append(mock.calls.FindById, callInfo)
	mock.lockFindById.Unlock()
	return mock.FindByIdFunc(db, entity, id)
}

// FindByIdCalls gets all the calls that were made to FindById.
// Check the length with:
//
//	len(mockedRepository.FindByIdCalls())
func (mock *RepositoryMock[T]) FindByIdCalls() []struct {
	Db     *gorm.DB
	Entity *T
	ID     any
} {
	var calls []struct {
		Db     *gorm.DB
		Entity *T
		ID     any
	}
	mock.lockFindById.RLock()
	calls = mock.calls.FindById
	mock.lockFindById.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RepositoryMock[T]) Update(db *gorm.DB, entity *T) error {
	if mock.UpdateFunc == nil {
		panic("RepositoryMock.UpdateFunc: method is nil but Repository.Update was just called")
	}
	callInfo := struct {
		Db     *gorm.DB
		Entity *T
	}{
		Db:     db,
		Entity: entity,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(db, entity)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedRepository.UpdateCalls())
func (mock *RepositoryMock[T]) UpdateCalls() []struct {
	Db     *gorm.DB
	Entity *T
} {
	var calls []struct {
		Db     *gorm.DB
		Entity *T
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
