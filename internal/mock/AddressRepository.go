// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"golang-clean-architecture/internal/entity"
	"golang-clean-architecture/internal/repository"
	"gorm.io/gorm"
	"sync"
)

// Ensure, that AddressRepositoryMock does implement repository.AddressRepository.
// If this is not the case, regenerate this file with moq.
var _ repository.AddressRepository = &AddressRepositoryMock{}

// AddressRepositoryMock is a mock implementation of repository.AddressRepository.
//
//	func TestSomethingThatUsesAddressRepository(t *testing.T) {
//
//		// make and configure a mocked repository.AddressRepository
//		mockedAddressRepository := &AddressRepositoryMock{
//			CreateFunc: func(db *gorm.DB, entityMoqParam *entity.Address) error {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(db *gorm.DB, entityMoqParam *entity.Address) error {
//				panic("mock out the Delete method")
//			},
//			FindAllByContactIdFunc: func(db *gorm.DB, contactId string) ([]entity.Address, error) {
//				panic("mock out the FindAllByContactId method")
//			},
//			FindByIdAndContactIdFunc: func(db *gorm.DB, address *entity.Address, id string, contactId string) error {
//				panic("mock out the FindByIdAndContactId method")
//			},
//			UpdateFunc: func(db *gorm.DB, entityMoqParam *entity.Address) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedAddressRepository in code that requires repository.AddressRepository
//		// and then make assertions.
//
//	}
type AddressRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(db *gorm.DB, entityMoqParam *entity.Address) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(db *gorm.DB, entityMoqParam *entity.Address) error

	// FindAllByContactIdFunc mocks the FindAllByContactId method.
	FindAllByContactIdFunc func(db *gorm.DB, contactId string) ([]entity.Address, error)

	// FindByIdAndContactIdFunc mocks the FindByIdAndContactId method.
	FindByIdAndContactIdFunc func(db *gorm.DB, address *entity.Address, id string, contactId string) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(db *gorm.DB, entityMoqParam *entity.Address) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Db is the db argument value.
			Db *gorm.DB
			// EntityMoqParam is the entityMoqParam argument value.
			EntityMoqParam *entity.Address
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Db is the db argument value.
			Db *gorm.DB
			// EntityMoqParam is the entityMoqParam argument value.
			EntityMoqParam *entity.Address
		}
		// FindAllByContactId holds details about calls to the FindAllByContactId method.
		FindAllByContactId []struct {
			// Db is the db argument value.
			Db *gorm.DB
			// ContactId is the contactId argument value.
			ContactId string
		}
		// FindByIdAndContactId holds details about calls to the FindByIdAndContactId method.
		FindByIdAndContactId []struct {
			// Db is the db argument value.
			Db *gorm.DB
			// Address is the address argument value.
			Address *entity.Address
			// ID is the id argument value.
			ID string
			// ContactId is the contactId argument value.
			ContactId string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Db is the db argument value.
			Db *gorm.DB
			// EntityMoqParam is the entityMoqParam argument value.
			EntityMoqParam *entity.Address
		}
	}
	lockCreate               sync.RWMutex
	lockDelete               sync.RWMutex
	lockFindAllByContactId   sync.RWMutex
	lockFindByIdAndContactId sync.RWMutex
	lockUpdate               sync.RWMutex
}

// Create calls CreateFunc.
func (mock *AddressRepositoryMock) Create(db *gorm.DB, entityMoqParam *entity.Address) error {
	if mock.CreateFunc == nil {
		panic("AddressRepositoryMock.CreateFunc: method is nil but AddressRepository.Create was just called")
	}
	callInfo := struct {
		Db             *gorm.DB
		EntityMoqParam *entity.Address
	}{
		Db:             db,
		EntityMoqParam: entityMoqParam,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(db, entityMoqParam)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedAddressRepository.CreateCalls())
func (mock *AddressRepositoryMock) CreateCalls() []struct {
	Db             *gorm.DB
	EntityMoqParam *entity.Address
} {
	var calls []struct {
		Db             *gorm.DB
		EntityMoqParam *entity.Address
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *AddressRepositoryMock) Delete(db *gorm.DB, entityMoqParam *entity.Address) error {
	if mock.DeleteFunc == nil {
		panic("AddressRepositoryMock.DeleteFunc: method is nil but AddressRepository.Delete was just called")
	}
	callInfo := struct {
		Db             *gorm.DB
		EntityMoqParam *entity.Address
	}{
		Db:             db,
		EntityMoqParam: entityMoqParam,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(db, entityMoqParam)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedAddressRepository.DeleteCalls())
func (mock *AddressRepositoryMock) DeleteCalls() []struct {
	Db             *gorm.DB
	EntityMoqParam *entity.Address
} {
	var calls []struct {
		Db             *gorm.DB
		EntityMoqParam *entity.Address
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// FindAllByContactId calls FindAllByContactIdFunc.
func (mock *AddressRepositoryMock) FindAllByContactId(db *gorm.DB, contactId string) ([]entity.Address, error) {
	if mock.FindAllByContactIdFunc == nil {
		panic("AddressRepositoryMock.FindAllByContactIdFunc: method is nil but AddressRepository.FindAllByContactId was just called")
	}
	callInfo := struct {
		Db        *gorm.DB
		ContactId string
	}{
		Db:        db,
		ContactId: contactId,
	}
	mock.lockFindAllByContactId.Lock()
	mock.calls.FindAllByContactId = append(mock.calls.FindAllByContactId, callInfo)
	mock.lockFindAllByContactId.Unlock()
	return mock.FindAllByContactIdFunc(db, contactId)
}

// FindAllByContactIdCalls gets all the calls that were made to FindAllByContactId.
// Check the length with:
//
//	len(mockedAddressRepository.FindAllByContactIdCalls())
func (mock *AddressRepositoryMock) FindAllByContactIdCalls() []struct {
	Db        *gorm.DB
	ContactId string
} {
	var calls []struct {
		Db        *gorm.DB
		ContactId string
	}
	mock.lockFindAllByContactId.RLock()
	calls = mock.calls.FindAllByContactId
	mock.lockFindAllByContactId.RUnlock()
	return calls
}

// FindByIdAndContactId calls FindByIdAndContactIdFunc.
func (mock *AddressRepositoryMock) FindByIdAndContactId(db *gorm.DB, address *entity.Address, id string, contactId string) error {
	if mock.FindByIdAndContactIdFunc == nil {
		panic("AddressRepositoryMock.FindByIdAndContactIdFunc: method is nil but AddressRepository.FindByIdAndContactId was just called")
	}
	callInfo := struct {
		Db        *gorm.DB
		Address   *entity.Address
		ID        string
		ContactId string
	}{
		Db:        db,
		Address:   address,
		ID:        id,
		ContactId: contactId,
	}
	mock.lockFindByIdAndContactId.Lock()
	mock.calls.FindByIdAndContactId = append(mock.calls.FindByIdAndContactId, callInfo)
	mock.lockFindByIdAndContactId.Unlock()
	return mock.FindByIdAndContactIdFunc(db, address, id, contactId)
}

// FindByIdAndContactIdCalls gets all the calls that were made to FindByIdAndContactId.
// Check the length with:
//
//	len(mockedAddressRepository.FindByIdAndContactIdCalls())
func (mock *AddressRepositoryMock) FindByIdAndContactIdCalls() []struct {
	Db        *gorm.DB
	Address   *entity.Address
	ID        string
	ContactId string
} {
	var calls []struct {
		Db        *gorm.DB
		Address   *entity.Address
		ID        string
		ContactId string
	}
	mock.lockFindByIdAndContactId.RLock()
	calls = mock.calls.FindByIdAndContactId
	mock.lockFindByIdAndContactId.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *AddressRepositoryMock) Update(db *gorm.DB, entityMoqParam *entity.Address) error {
	if mock.UpdateFunc == nil {
		panic("AddressRepositoryMock.UpdateFunc: method is nil but AddressRepository.Update was just called")
	}
	callInfo := struct {
		Db             *gorm.DB
		EntityMoqParam *entity.Address
	}{
		Db:             db,
		EntityMoqParam: entityMoqParam,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(db, entityMoqParam)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedAddressRepository.UpdateCalls())
func (mock *AddressRepositoryMock) UpdateCalls() []struct {
	Db             *gorm.DB
	EntityMoqParam *entity.Address
} {
	var calls []struct {
		Db             *gorm.DB
		EntityMoqParam *entity.Address
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
