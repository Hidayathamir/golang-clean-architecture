// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/Hidayathamir/golang-clean-architecture/internal/entity"
	"github.com/Hidayathamir/golang-clean-architecture/internal/repository"
	"gorm.io/gorm"
	"sync"
)

// Ensure, that AddressRepositoryMock does implement repository.AddressRepository.
// If this is not the case, regenerate this file with moq.
var _ repository.AddressRepository = &AddressRepositoryMock{}

// AddressRepositoryMock is a mock implementation of repository.AddressRepository.
//
//	func TestSomethingThatUsesAddressRepository(t *testing.T) {
//
//		// make and configure a mocked repository.AddressRepository
//		mockedAddressRepository := &AddressRepositoryMock{
//			CreateFunc: func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Address) error {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Address) error {
//				panic("mock out the Delete method")
//			},
//			FindAllByContactIDFunc: func(ctx context.Context, db *gorm.DB, contactID string) (entity.AddressList, error) {
//				panic("mock out the FindAllByContactID method")
//			},
//			FindByIDAndContactIDFunc: func(ctx context.Context, db *gorm.DB, address *entity.Address, id string, contactID string) error {
//				panic("mock out the FindByIDAndContactID method")
//			},
//			UpdateFunc: func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Address) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedAddressRepository in code that requires repository.AddressRepository
//		// and then make assertions.
//
//	}
type AddressRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Address) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Address) error

	// FindAllByContactIDFunc mocks the FindAllByContactID method.
	FindAllByContactIDFunc func(ctx context.Context, db *gorm.DB, contactID string) (entity.AddressList, error)

	// FindByIDAndContactIDFunc mocks the FindByIDAndContactID method.
	FindByIDAndContactIDFunc func(ctx context.Context, db *gorm.DB, address *entity.Address, id string, contactID string) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Address) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// EntityMoqParam is the entityMoqParam argument value.
			EntityMoqParam *entity.Address
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// EntityMoqParam is the entityMoqParam argument value.
			EntityMoqParam *entity.Address
		}
		// FindAllByContactID holds details about calls to the FindAllByContactID method.
		FindAllByContactID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// ContactID is the contactID argument value.
			ContactID string
		}
		// FindByIDAndContactID holds details about calls to the FindByIDAndContactID method.
		FindByIDAndContactID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// Address is the address argument value.
			Address *entity.Address
			// ID is the id argument value.
			ID string
			// ContactID is the contactID argument value.
			ContactID string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// EntityMoqParam is the entityMoqParam argument value.
			EntityMoqParam *entity.Address
		}
	}
	lockCreate               sync.RWMutex
	lockDelete               sync.RWMutex
	lockFindAllByContactID   sync.RWMutex
	lockFindByIDAndContactID sync.RWMutex
	lockUpdate               sync.RWMutex
}

// Create calls CreateFunc.
func (mock *AddressRepositoryMock) Create(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Address) error {
	if mock.CreateFunc == nil {
		panic("AddressRepositoryMock.CreateFunc: method is nil but AddressRepository.Create was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.Address
	}{
		Ctx:            ctx,
		Db:             db,
		EntityMoqParam: entityMoqParam,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, db, entityMoqParam)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedAddressRepository.CreateCalls())
func (mock *AddressRepositoryMock) CreateCalls() []struct {
	Ctx            context.Context
	Db             *gorm.DB
	EntityMoqParam *entity.Address
} {
	var calls []struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.Address
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *AddressRepositoryMock) Delete(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Address) error {
	if mock.DeleteFunc == nil {
		panic("AddressRepositoryMock.DeleteFunc: method is nil but AddressRepository.Delete was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.Address
	}{
		Ctx:            ctx,
		Db:             db,
		EntityMoqParam: entityMoqParam,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, db, entityMoqParam)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedAddressRepository.DeleteCalls())
func (mock *AddressRepositoryMock) DeleteCalls() []struct {
	Ctx            context.Context
	Db             *gorm.DB
	EntityMoqParam *entity.Address
} {
	var calls []struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.Address
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// FindAllByContactID calls FindAllByContactIDFunc.
func (mock *AddressRepositoryMock) FindAllByContactID(ctx context.Context, db *gorm.DB, contactID string) (entity.AddressList, error) {
	if mock.FindAllByContactIDFunc == nil {
		panic("AddressRepositoryMock.FindAllByContactIDFunc: method is nil but AddressRepository.FindAllByContactID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Db        *gorm.DB
		ContactID string
	}{
		Ctx:       ctx,
		Db:        db,
		ContactID: contactID,
	}
	mock.lockFindAllByContactID.Lock()
	mock.calls.FindAllByContactID = append(mock.calls.FindAllByContactID, callInfo)
	mock.lockFindAllByContactID.Unlock()
	return mock.FindAllByContactIDFunc(ctx, db, contactID)
}

// FindAllByContactIDCalls gets all the calls that were made to FindAllByContactID.
// Check the length with:
//
//	len(mockedAddressRepository.FindAllByContactIDCalls())
func (mock *AddressRepositoryMock) FindAllByContactIDCalls() []struct {
	Ctx       context.Context
	Db        *gorm.DB
	ContactID string
} {
	var calls []struct {
		Ctx       context.Context
		Db        *gorm.DB
		ContactID string
	}
	mock.lockFindAllByContactID.RLock()
	calls = mock.calls.FindAllByContactID
	mock.lockFindAllByContactID.RUnlock()
	return calls
}

// FindByIDAndContactID calls FindByIDAndContactIDFunc.
func (mock *AddressRepositoryMock) FindByIDAndContactID(ctx context.Context, db *gorm.DB, address *entity.Address, id string, contactID string) error {
	if mock.FindByIDAndContactIDFunc == nil {
		panic("AddressRepositoryMock.FindByIDAndContactIDFunc: method is nil but AddressRepository.FindByIDAndContactID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Db        *gorm.DB
		Address   *entity.Address
		ID        string
		ContactID string
	}{
		Ctx:       ctx,
		Db:        db,
		Address:   address,
		ID:        id,
		ContactID: contactID,
	}
	mock.lockFindByIDAndContactID.Lock()
	mock.calls.FindByIDAndContactID = append(mock.calls.FindByIDAndContactID, callInfo)
	mock.lockFindByIDAndContactID.Unlock()
	return mock.FindByIDAndContactIDFunc(ctx, db, address, id, contactID)
}

// FindByIDAndContactIDCalls gets all the calls that were made to FindByIDAndContactID.
// Check the length with:
//
//	len(mockedAddressRepository.FindByIDAndContactIDCalls())
func (mock *AddressRepositoryMock) FindByIDAndContactIDCalls() []struct {
	Ctx       context.Context
	Db        *gorm.DB
	Address   *entity.Address
	ID        string
	ContactID string
} {
	var calls []struct {
		Ctx       context.Context
		Db        *gorm.DB
		Address   *entity.Address
		ID        string
		ContactID string
	}
	mock.lockFindByIDAndContactID.RLock()
	calls = mock.calls.FindByIDAndContactID
	mock.lockFindByIDAndContactID.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *AddressRepositoryMock) Update(ctx context.Context, db *gorm.DB, entityMoqParam *entity.Address) error {
	if mock.UpdateFunc == nil {
		panic("AddressRepositoryMock.UpdateFunc: method is nil but AddressRepository.Update was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.Address
	}{
		Ctx:            ctx,
		Db:             db,
		EntityMoqParam: entityMoqParam,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, db, entityMoqParam)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedAddressRepository.UpdateCalls())
func (mock *AddressRepositoryMock) UpdateCalls() []struct {
	Ctx            context.Context
	Db             *gorm.DB
	EntityMoqParam *entity.Address
} {
	var calls []struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.Address
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
