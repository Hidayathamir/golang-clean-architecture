// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/Hidayathamir/golang-clean-architecture/internal/gateway/messaging"
	"github.com/Hidayathamir/golang-clean-architecture/internal/model"
	"sync"
)

// Ensure, that TodoProducerMock does implement messaging.TodoProducer.
// If this is not the case, regenerate this file with moq.
var _ messaging.TodoProducer = &TodoProducerMock{}

// TodoProducerMock is a mock implementation of messaging.TodoProducer.
//
//	func TestSomethingThatUsesTodoProducer(t *testing.T) {
//
//		// make and configure a mocked messaging.TodoProducer
//		mockedTodoProducer := &TodoProducerMock{
//			SendFunc: func(ctx context.Context, event *model.TodoCompletedEvent) error {
//				panic("mock out the Send method")
//			},
//		}
//
//		// use mockedTodoProducer in code that requires messaging.TodoProducer
//		// and then make assertions.
//
//	}
type TodoProducerMock struct {
	// SendFunc mocks the Send method.
	SendFunc func(ctx context.Context, event *model.TodoCompletedEvent) error

	// calls tracks calls to the methods.
	calls struct {
		// Send holds details about calls to the Send method.
		Send []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Event is the event argument value.
			Event *model.TodoCompletedEvent
		}
	}
	lockSend sync.RWMutex
}

// Send calls SendFunc.
func (mock *TodoProducerMock) Send(ctx context.Context, event *model.TodoCompletedEvent) error {
	if mock.SendFunc == nil {
		panic("TodoProducerMock.SendFunc: method is nil but TodoProducer.Send was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Event *model.TodoCompletedEvent
	}{
		Ctx:   ctx,
		Event: event,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(ctx, event)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//
//	len(mockedTodoProducer.SendCalls())
func (mock *TodoProducerMock) SendCalls() []struct {
	Ctx   context.Context
	Event *model.TodoCompletedEvent
} {
	var calls []struct {
		Ctx   context.Context
		Event *model.TodoCompletedEvent
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}
