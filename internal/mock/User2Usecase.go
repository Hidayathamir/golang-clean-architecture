// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/Hidayathamir/golang-clean-architecture/internal/model"
	"github.com/Hidayathamir/golang-clean-architecture/internal/usecase/user2"
	"sync"
)

// Ensure, that User2UsecaseMock does implement user2.User2Usecase.
// If this is not the case, regenerate this file with moq.
var _ user2.User2Usecase = &User2UsecaseMock{}

// User2UsecaseMock is a mock implementation of user2.User2Usecase.
//
//	func TestSomethingThatUsesUser2Usecase(t *testing.T) {
//
//		// make and configure a mocked user2.User2Usecase
//		mockedUser2Usecase := &User2UsecaseMock{
//			LoginFunc: func(ctx context.Context, req *model.LoginUser2Request) (*model.User2TokenResponse, error) {
//				panic("mock out the Login method")
//			},
//			ProfileFunc: func(ctx context.Context, req *model.GetUser2Request) (*model.User2Response, error) {
//				panic("mock out the Profile method")
//			},
//			RegisterFunc: func(ctx context.Context, req *model.RegisterUser2Request) (*model.User2Response, error) {
//				panic("mock out the Register method")
//			},
//			VerifyTokenFunc: func(ctx context.Context, req *model.VerifyUser2TokenRequest) (*model.User2Auth, error) {
//				panic("mock out the VerifyToken method")
//			},
//		}
//
//		// use mockedUser2Usecase in code that requires user2.User2Usecase
//		// and then make assertions.
//
//	}
type User2UsecaseMock struct {
	// LoginFunc mocks the Login method.
	LoginFunc func(ctx context.Context, req *model.LoginUser2Request) (*model.User2TokenResponse, error)

	// ProfileFunc mocks the Profile method.
	ProfileFunc func(ctx context.Context, req *model.GetUser2Request) (*model.User2Response, error)

	// RegisterFunc mocks the Register method.
	RegisterFunc func(ctx context.Context, req *model.RegisterUser2Request) (*model.User2Response, error)

	// VerifyTokenFunc mocks the VerifyToken method.
	VerifyTokenFunc func(ctx context.Context, req *model.VerifyUser2TokenRequest) (*model.User2Auth, error)

	// calls tracks calls to the methods.
	calls struct {
		// Login holds details about calls to the Login method.
		Login []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.LoginUser2Request
		}
		// Profile holds details about calls to the Profile method.
		Profile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.GetUser2Request
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.RegisterUser2Request
		}
		// VerifyToken holds details about calls to the VerifyToken method.
		VerifyToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.VerifyUser2TokenRequest
		}
	}
	lockLogin       sync.RWMutex
	lockProfile     sync.RWMutex
	lockRegister    sync.RWMutex
	lockVerifyToken sync.RWMutex
}

// Login calls LoginFunc.
func (mock *User2UsecaseMock) Login(ctx context.Context, req *model.LoginUser2Request) (*model.User2TokenResponse, error) {
	if mock.LoginFunc == nil {
		panic("User2UsecaseMock.LoginFunc: method is nil but User2Usecase.Login was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.LoginUser2Request
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	return mock.LoginFunc(ctx, req)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//
//	len(mockedUser2Usecase.LoginCalls())
func (mock *User2UsecaseMock) LoginCalls() []struct {
	Ctx context.Context
	Req *model.LoginUser2Request
} {
	var calls []struct {
		Ctx context.Context
		Req *model.LoginUser2Request
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}

// Profile calls ProfileFunc.
func (mock *User2UsecaseMock) Profile(ctx context.Context, req *model.GetUser2Request) (*model.User2Response, error) {
	if mock.ProfileFunc == nil {
		panic("User2UsecaseMock.ProfileFunc: method is nil but User2Usecase.Profile was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.GetUser2Request
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockProfile.Lock()
	mock.calls.Profile = append(mock.calls.Profile, callInfo)
	mock.lockProfile.Unlock()
	return mock.ProfileFunc(ctx, req)
}

// ProfileCalls gets all the calls that were made to Profile.
// Check the length with:
//
//	len(mockedUser2Usecase.ProfileCalls())
func (mock *User2UsecaseMock) ProfileCalls() []struct {
	Ctx context.Context
	Req *model.GetUser2Request
} {
	var calls []struct {
		Ctx context.Context
		Req *model.GetUser2Request
	}
	mock.lockProfile.RLock()
	calls = mock.calls.Profile
	mock.lockProfile.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *User2UsecaseMock) Register(ctx context.Context, req *model.RegisterUser2Request) (*model.User2Response, error) {
	if mock.RegisterFunc == nil {
		panic("User2UsecaseMock.RegisterFunc: method is nil but User2Usecase.Register was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.RegisterUser2Request
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	return mock.RegisterFunc(ctx, req)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//
//	len(mockedUser2Usecase.RegisterCalls())
func (mock *User2UsecaseMock) RegisterCalls() []struct {
	Ctx context.Context
	Req *model.RegisterUser2Request
} {
	var calls []struct {
		Ctx context.Context
		Req *model.RegisterUser2Request
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}

// VerifyToken calls VerifyTokenFunc.
func (mock *User2UsecaseMock) VerifyToken(ctx context.Context, req *model.VerifyUser2TokenRequest) (*model.User2Auth, error) {
	if mock.VerifyTokenFunc == nil {
		panic("User2UsecaseMock.VerifyTokenFunc: method is nil but User2Usecase.VerifyToken was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.VerifyUser2TokenRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockVerifyToken.Lock()
	mock.calls.VerifyToken = append(mock.calls.VerifyToken, callInfo)
	mock.lockVerifyToken.Unlock()
	return mock.VerifyTokenFunc(ctx, req)
}

// VerifyTokenCalls gets all the calls that were made to VerifyToken.
// Check the length with:
//
//	len(mockedUser2Usecase.VerifyTokenCalls())
func (mock *User2UsecaseMock) VerifyTokenCalls() []struct {
	Ctx context.Context
	Req *model.VerifyUser2TokenRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.VerifyUser2TokenRequest
	}
	mock.lockVerifyToken.RLock()
	calls = mock.calls.VerifyToken
	mock.lockVerifyToken.RUnlock()
	return calls
}
