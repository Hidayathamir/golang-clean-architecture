// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"golang-clean-architecture/internal/gateway/rest"
	"sync"
)

// Ensure, that S3ClientMock does implement rest.S3Client.
// If this is not the case, regenerate this file with moq.
var _ rest.S3Client = &S3ClientMock{}

// S3ClientMock is a mock implementation of rest.S3Client.
//
//	func TestSomethingThatUsesS3Client(t *testing.T) {
//
//		// make and configure a mocked rest.S3Client
//		mockedS3Client := &S3ClientMock{
//			DeleteObjectFunc: func(ctx context.Context, bucket string, key string) (bool, error) {
//				panic("mock out the DeleteObject method")
//			},
//			DownloadFunc: func(ctx context.Context, bucket string, key string) (string, error) {
//				panic("mock out the Download method")
//			},
//		}
//
//		// use mockedS3Client in code that requires rest.S3Client
//		// and then make assertions.
//
//	}
type S3ClientMock struct {
	// DeleteObjectFunc mocks the DeleteObject method.
	DeleteObjectFunc func(ctx context.Context, bucket string, key string) (bool, error)

	// DownloadFunc mocks the Download method.
	DownloadFunc func(ctx context.Context, bucket string, key string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteObject holds details about calls to the DeleteObject method.
		DeleteObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Bucket is the bucket argument value.
			Bucket string
			// Key is the key argument value.
			Key string
		}
		// Download holds details about calls to the Download method.
		Download []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Bucket is the bucket argument value.
			Bucket string
			// Key is the key argument value.
			Key string
		}
	}
	lockDeleteObject sync.RWMutex
	lockDownload     sync.RWMutex
}

// DeleteObject calls DeleteObjectFunc.
func (mock *S3ClientMock) DeleteObject(ctx context.Context, bucket string, key string) (bool, error) {
	if mock.DeleteObjectFunc == nil {
		panic("S3ClientMock.DeleteObjectFunc: method is nil but S3Client.DeleteObject was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Bucket string
		Key    string
	}{
		Ctx:    ctx,
		Bucket: bucket,
		Key:    key,
	}
	mock.lockDeleteObject.Lock()
	mock.calls.DeleteObject = append(mock.calls.DeleteObject, callInfo)
	mock.lockDeleteObject.Unlock()
	return mock.DeleteObjectFunc(ctx, bucket, key)
}

// DeleteObjectCalls gets all the calls that were made to DeleteObject.
// Check the length with:
//
//	len(mockedS3Client.DeleteObjectCalls())
func (mock *S3ClientMock) DeleteObjectCalls() []struct {
	Ctx    context.Context
	Bucket string
	Key    string
} {
	var calls []struct {
		Ctx    context.Context
		Bucket string
		Key    string
	}
	mock.lockDeleteObject.RLock()
	calls = mock.calls.DeleteObject
	mock.lockDeleteObject.RUnlock()
	return calls
}

// Download calls DownloadFunc.
func (mock *S3ClientMock) Download(ctx context.Context, bucket string, key string) (string, error) {
	if mock.DownloadFunc == nil {
		panic("S3ClientMock.DownloadFunc: method is nil but S3Client.Download was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Bucket string
		Key    string
	}{
		Ctx:    ctx,
		Bucket: bucket,
		Key:    key,
	}
	mock.lockDownload.Lock()
	mock.calls.Download = append(mock.calls.Download, callInfo)
	mock.lockDownload.Unlock()
	return mock.DownloadFunc(ctx, bucket, key)
}

// DownloadCalls gets all the calls that were made to Download.
// Check the length with:
//
//	len(mockedS3Client.DownloadCalls())
func (mock *S3ClientMock) DownloadCalls() []struct {
	Ctx    context.Context
	Bucket string
	Key    string
} {
	var calls []struct {
		Ctx    context.Context
		Bucket string
		Key    string
	}
	mock.lockDownload.RLock()
	calls = mock.calls.Download
	mock.lockDownload.RUnlock()
	return calls
}
