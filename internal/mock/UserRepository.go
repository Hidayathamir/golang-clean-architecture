// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/Hidayathamir/golang-clean-architecture/internal/entity"
	"github.com/Hidayathamir/golang-clean-architecture/internal/repository"
	"gorm.io/gorm"
	"sync"
)

// Ensure, that UserRepositoryMock does implement repository.UserRepository.
// If this is not the case, regenerate this file with moq.
var _ repository.UserRepository = &UserRepositoryMock{}

// UserRepositoryMock is a mock implementation of repository.UserRepository.
//
//	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
//		// make and configure a mocked repository.UserRepository
//		mockedUserRepository := &UserRepositoryMock{
//			CountByIdFunc: func(ctx context.Context, db *gorm.DB, id string) (int64, error) {
//				panic("mock out the CountById method")
//			},
//			CreateFunc: func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.User) error {
//				panic("mock out the Create method")
//			},
//			FindByIdFunc: func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.User, id string) error {
//				panic("mock out the FindById method")
//			},
//			FindByTokenFunc: func(ctx context.Context, db *gorm.DB, user *entity.User, token string) error {
//				panic("mock out the FindByToken method")
//			},
//			UpdateFunc: func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.User) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedUserRepository in code that requires repository.UserRepository
//		// and then make assertions.
//
//	}
type UserRepositoryMock struct {
	// CountByIdFunc mocks the CountById method.
	CountByIdFunc func(ctx context.Context, db *gorm.DB, id string) (int64, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.User) error

	// FindByIdFunc mocks the FindById method.
	FindByIdFunc func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.User, id string) error

	// FindByTokenFunc mocks the FindByToken method.
	FindByTokenFunc func(ctx context.Context, db *gorm.DB, user *entity.User, token string) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, db *gorm.DB, entityMoqParam *entity.User) error

	// calls tracks calls to the methods.
	calls struct {
		// CountById holds details about calls to the CountById method.
		CountById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// ID is the id argument value.
			ID string
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// EntityMoqParam is the entityMoqParam argument value.
			EntityMoqParam *entity.User
		}
		// FindById holds details about calls to the FindById method.
		FindById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// EntityMoqParam is the entityMoqParam argument value.
			EntityMoqParam *entity.User
			// ID is the id argument value.
			ID string
		}
		// FindByToken holds details about calls to the FindByToken method.
		FindByToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// User is the user argument value.
			User *entity.User
			// Token is the token argument value.
			Token string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// EntityMoqParam is the entityMoqParam argument value.
			EntityMoqParam *entity.User
		}
	}
	lockCountById   sync.RWMutex
	lockCreate      sync.RWMutex
	lockFindById    sync.RWMutex
	lockFindByToken sync.RWMutex
	lockUpdate      sync.RWMutex
}

// CountById calls CountByIdFunc.
func (mock *UserRepositoryMock) CountById(ctx context.Context, db *gorm.DB, id string) (int64, error) {
	if mock.CountByIdFunc == nil {
		panic("UserRepositoryMock.CountByIdFunc: method is nil but UserRepository.CountById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  *gorm.DB
		ID  string
	}{
		Ctx: ctx,
		Db:  db,
		ID:  id,
	}
	mock.lockCountById.Lock()
	mock.calls.CountById = append(mock.calls.CountById, callInfo)
	mock.lockCountById.Unlock()
	return mock.CountByIdFunc(ctx, db, id)
}

// CountByIdCalls gets all the calls that were made to CountById.
// Check the length with:
//
//	len(mockedUserRepository.CountByIdCalls())
func (mock *UserRepositoryMock) CountByIdCalls() []struct {
	Ctx context.Context
	Db  *gorm.DB
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		Db  *gorm.DB
		ID  string
	}
	mock.lockCountById.RLock()
	calls = mock.calls.CountById
	mock.lockCountById.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *UserRepositoryMock) Create(ctx context.Context, db *gorm.DB, entityMoqParam *entity.User) error {
	if mock.CreateFunc == nil {
		panic("UserRepositoryMock.CreateFunc: method is nil but UserRepository.Create was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.User
	}{
		Ctx:            ctx,
		Db:             db,
		EntityMoqParam: entityMoqParam,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, db, entityMoqParam)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedUserRepository.CreateCalls())
func (mock *UserRepositoryMock) CreateCalls() []struct {
	Ctx            context.Context
	Db             *gorm.DB
	EntityMoqParam *entity.User
} {
	var calls []struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.User
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// FindById calls FindByIdFunc.
func (mock *UserRepositoryMock) FindById(ctx context.Context, db *gorm.DB, entityMoqParam *entity.User, id string) error {
	if mock.FindByIdFunc == nil {
		panic("UserRepositoryMock.FindByIdFunc: method is nil but UserRepository.FindById was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.User
		ID             string
	}{
		Ctx:            ctx,
		Db:             db,
		EntityMoqParam: entityMoqParam,
		ID:             id,
	}
	mock.lockFindById.Lock()
	mock.calls.FindById = append(mock.calls.FindById, callInfo)
	mock.lockFindById.Unlock()
	return mock.FindByIdFunc(ctx, db, entityMoqParam, id)
}

// FindByIdCalls gets all the calls that were made to FindById.
// Check the length with:
//
//	len(mockedUserRepository.FindByIdCalls())
func (mock *UserRepositoryMock) FindByIdCalls() []struct {
	Ctx            context.Context
	Db             *gorm.DB
	EntityMoqParam *entity.User
	ID             string
} {
	var calls []struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.User
		ID             string
	}
	mock.lockFindById.RLock()
	calls = mock.calls.FindById
	mock.lockFindById.RUnlock()
	return calls
}

// FindByToken calls FindByTokenFunc.
func (mock *UserRepositoryMock) FindByToken(ctx context.Context, db *gorm.DB, user *entity.User, token string) error {
	if mock.FindByTokenFunc == nil {
		panic("UserRepositoryMock.FindByTokenFunc: method is nil but UserRepository.FindByToken was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Db    *gorm.DB
		User  *entity.User
		Token string
	}{
		Ctx:   ctx,
		Db:    db,
		User:  user,
		Token: token,
	}
	mock.lockFindByToken.Lock()
	mock.calls.FindByToken = append(mock.calls.FindByToken, callInfo)
	mock.lockFindByToken.Unlock()
	return mock.FindByTokenFunc(ctx, db, user, token)
}

// FindByTokenCalls gets all the calls that were made to FindByToken.
// Check the length with:
//
//	len(mockedUserRepository.FindByTokenCalls())
func (mock *UserRepositoryMock) FindByTokenCalls() []struct {
	Ctx   context.Context
	Db    *gorm.DB
	User  *entity.User
	Token string
} {
	var calls []struct {
		Ctx   context.Context
		Db    *gorm.DB
		User  *entity.User
		Token string
	}
	mock.lockFindByToken.RLock()
	calls = mock.calls.FindByToken
	mock.lockFindByToken.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *UserRepositoryMock) Update(ctx context.Context, db *gorm.DB, entityMoqParam *entity.User) error {
	if mock.UpdateFunc == nil {
		panic("UserRepositoryMock.UpdateFunc: method is nil but UserRepository.Update was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.User
	}{
		Ctx:            ctx,
		Db:             db,
		EntityMoqParam: entityMoqParam,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, db, entityMoqParam)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedUserRepository.UpdateCalls())
func (mock *UserRepositoryMock) UpdateCalls() []struct {
	Ctx            context.Context
	Db             *gorm.DB
	EntityMoqParam *entity.User
} {
	var calls []struct {
		Ctx            context.Context
		Db             *gorm.DB
		EntityMoqParam *entity.User
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
