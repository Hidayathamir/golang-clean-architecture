// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/Hidayathamir/golang-clean-architecture/internal/model"
	"github.com/Hidayathamir/golang-clean-architecture/internal/usecase/contact"
	"sync"
)

// Ensure, that ContactUsecaseMock does implement contact.ContactUsecase.
// If this is not the case, regenerate this file with moq.
var _ contact.ContactUsecase = &ContactUsecaseMock{}

// ContactUsecaseMock is a mock implementation of contact.ContactUsecase.
//
//	func TestSomethingThatUsesContactUsecase(t *testing.T) {
//
//		// make and configure a mocked contact.ContactUsecase
//		mockedContactUsecase := &ContactUsecaseMock{
//			CreateFunc: func(ctx context.Context, req *model.CreateContactRequest) (*model.ContactResponse, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, req *model.DeleteContactRequest) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context, req *model.GetContactRequest) (*model.ContactResponse, error) {
//				panic("mock out the Get method")
//			},
//			SearchFunc: func(ctx context.Context, req *model.SearchContactRequest) (model.ContactResponseList, int64, error) {
//				panic("mock out the Search method")
//			},
//			UpdateFunc: func(ctx context.Context, req *model.UpdateContactRequest) (*model.ContactResponse, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedContactUsecase in code that requires contact.ContactUsecase
//		// and then make assertions.
//
//	}
type ContactUsecaseMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, req *model.CreateContactRequest) (*model.ContactResponse, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, req *model.DeleteContactRequest) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, req *model.GetContactRequest) (*model.ContactResponse, error)

	// SearchFunc mocks the Search method.
	SearchFunc func(ctx context.Context, req *model.SearchContactRequest) (model.ContactResponseList, int64, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, req *model.UpdateContactRequest) (*model.ContactResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.CreateContactRequest
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.DeleteContactRequest
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.GetContactRequest
		}
		// Search holds details about calls to the Search method.
		Search []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.SearchContactRequest
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *model.UpdateContactRequest
		}
	}
	lockCreate sync.RWMutex
	lockDelete sync.RWMutex
	lockGet    sync.RWMutex
	lockSearch sync.RWMutex
	lockUpdate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ContactUsecaseMock) Create(ctx context.Context, req *model.CreateContactRequest) (*model.ContactResponse, error) {
	if mock.CreateFunc == nil {
		panic("ContactUsecaseMock.CreateFunc: method is nil but ContactUsecase.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.CreateContactRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, req)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedContactUsecase.CreateCalls())
func (mock *ContactUsecaseMock) CreateCalls() []struct {
	Ctx context.Context
	Req *model.CreateContactRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.CreateContactRequest
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ContactUsecaseMock) Delete(ctx context.Context, req *model.DeleteContactRequest) error {
	if mock.DeleteFunc == nil {
		panic("ContactUsecaseMock.DeleteFunc: method is nil but ContactUsecase.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.DeleteContactRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, req)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedContactUsecase.DeleteCalls())
func (mock *ContactUsecaseMock) DeleteCalls() []struct {
	Ctx context.Context
	Req *model.DeleteContactRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.DeleteContactRequest
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ContactUsecaseMock) Get(ctx context.Context, req *model.GetContactRequest) (*model.ContactResponse, error) {
	if mock.GetFunc == nil {
		panic("ContactUsecaseMock.GetFunc: method is nil but ContactUsecase.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.GetContactRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, req)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedContactUsecase.GetCalls())
func (mock *ContactUsecaseMock) GetCalls() []struct {
	Ctx context.Context
	Req *model.GetContactRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.GetContactRequest
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Search calls SearchFunc.
func (mock *ContactUsecaseMock) Search(ctx context.Context, req *model.SearchContactRequest) (model.ContactResponseList, int64, error) {
	if mock.SearchFunc == nil {
		panic("ContactUsecaseMock.SearchFunc: method is nil but ContactUsecase.Search was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.SearchContactRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockSearch.Lock()
	mock.calls.Search = append(mock.calls.Search, callInfo)
	mock.lockSearch.Unlock()
	return mock.SearchFunc(ctx, req)
}

// SearchCalls gets all the calls that were made to Search.
// Check the length with:
//
//	len(mockedContactUsecase.SearchCalls())
func (mock *ContactUsecaseMock) SearchCalls() []struct {
	Ctx context.Context
	Req *model.SearchContactRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.SearchContactRequest
	}
	mock.lockSearch.RLock()
	calls = mock.calls.Search
	mock.lockSearch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ContactUsecaseMock) Update(ctx context.Context, req *model.UpdateContactRequest) (*model.ContactResponse, error) {
	if mock.UpdateFunc == nil {
		panic("ContactUsecaseMock.UpdateFunc: method is nil but ContactUsecase.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *model.UpdateContactRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, req)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedContactUsecase.UpdateCalls())
func (mock *ContactUsecaseMock) UpdateCalls() []struct {
	Ctx context.Context
	Req *model.UpdateContactRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *model.UpdateContactRequest
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
