// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"golang-clean-architecture/internal/gateway/rest"
	"sync"
)

// Ensure, that SlackClientMock does implement rest.SlackClient.
// If this is not the case, regenerate this file with moq.
var _ rest.SlackClient = &SlackClientMock{}

// SlackClientMock is a mock implementation of rest.SlackClient.
//
//	func TestSomethingThatUsesSlackClient(t *testing.T) {
//
//		// make and configure a mocked rest.SlackClient
//		mockedSlackClient := &SlackClientMock{
//			GetChannelListFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetChannelList method")
//			},
//			IsConnectedFunc: func(ctx context.Context) (bool, error) {
//				panic("mock out the IsConnected method")
//			},
//		}
//
//		// use mockedSlackClient in code that requires rest.SlackClient
//		// and then make assertions.
//
//	}
type SlackClientMock struct {
	// GetChannelListFunc mocks the GetChannelList method.
	GetChannelListFunc func(ctx context.Context) ([]string, error)

	// IsConnectedFunc mocks the IsConnected method.
	IsConnectedFunc func(ctx context.Context) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetChannelList holds details about calls to the GetChannelList method.
		GetChannelList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// IsConnected holds details about calls to the IsConnected method.
		IsConnected []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetChannelList sync.RWMutex
	lockIsConnected    sync.RWMutex
}

// GetChannelList calls GetChannelListFunc.
func (mock *SlackClientMock) GetChannelList(ctx context.Context) ([]string, error) {
	if mock.GetChannelListFunc == nil {
		panic("SlackClientMock.GetChannelListFunc: method is nil but SlackClient.GetChannelList was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetChannelList.Lock()
	mock.calls.GetChannelList = append(mock.calls.GetChannelList, callInfo)
	mock.lockGetChannelList.Unlock()
	return mock.GetChannelListFunc(ctx)
}

// GetChannelListCalls gets all the calls that were made to GetChannelList.
// Check the length with:
//
//	len(mockedSlackClient.GetChannelListCalls())
func (mock *SlackClientMock) GetChannelListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetChannelList.RLock()
	calls = mock.calls.GetChannelList
	mock.lockGetChannelList.RUnlock()
	return calls
}

// IsConnected calls IsConnectedFunc.
func (mock *SlackClientMock) IsConnected(ctx context.Context) (bool, error) {
	if mock.IsConnectedFunc == nil {
		panic("SlackClientMock.IsConnectedFunc: method is nil but SlackClient.IsConnected was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockIsConnected.Lock()
	mock.calls.IsConnected = append(mock.calls.IsConnected, callInfo)
	mock.lockIsConnected.Unlock()
	return mock.IsConnectedFunc(ctx)
}

// IsConnectedCalls gets all the calls that were made to IsConnected.
// Check the length with:
//
//	len(mockedSlackClient.IsConnectedCalls())
func (mock *SlackClientMock) IsConnectedCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockIsConnected.RLock()
	calls = mock.calls.IsConnected
	mock.lockIsConnected.RUnlock()
	return calls
}
