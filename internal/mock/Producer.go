// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"golang-clean-architecture/internal/gateway/messaging"
	"golang-clean-architecture/internal/model"
	"sync"
)

// Ensure, that ProducerMock does implement messaging.Producer.
// If this is not the case, regenerate this file with moq.
var _ messaging.Producer[model.Event] = &ProducerMock[model.Event]{}

// ProducerMock is a mock implementation of messaging.Producer.
//
//	func TestSomethingThatUsesProducer(t *testing.T) {
//
//		// make and configure a mocked messaging.Producer
//		mockedProducer := &ProducerMock{
//			GetTopicFunc: func() *string {
//				panic("mock out the GetTopic method")
//			},
//			SendFunc: func(event T) error {
//				panic("mock out the Send method")
//			},
//		}
//
//		// use mockedProducer in code that requires messaging.Producer
//		// and then make assertions.
//
//	}
type ProducerMock[T model.Event] struct {
	// GetTopicFunc mocks the GetTopic method.
	GetTopicFunc func() *string

	// SendFunc mocks the Send method.
	SendFunc func(event T) error

	// calls tracks calls to the methods.
	calls struct {
		// GetTopic holds details about calls to the GetTopic method.
		GetTopic []struct {
		}
		// Send holds details about calls to the Send method.
		Send []struct {
			// Event is the event argument value.
			Event T
		}
	}
	lockGetTopic sync.RWMutex
	lockSend     sync.RWMutex
}

// GetTopic calls GetTopicFunc.
func (mock *ProducerMock[T]) GetTopic() *string {
	if mock.GetTopicFunc == nil {
		panic("ProducerMock.GetTopicFunc: method is nil but Producer.GetTopic was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetTopic.Lock()
	mock.calls.GetTopic = append(mock.calls.GetTopic, callInfo)
	mock.lockGetTopic.Unlock()
	return mock.GetTopicFunc()
}

// GetTopicCalls gets all the calls that were made to GetTopic.
// Check the length with:
//
//	len(mockedProducer.GetTopicCalls())
func (mock *ProducerMock[T]) GetTopicCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetTopic.RLock()
	calls = mock.calls.GetTopic
	mock.lockGetTopic.RUnlock()
	return calls
}

// Send calls SendFunc.
func (mock *ProducerMock[T]) Send(event T) error {
	if mock.SendFunc == nil {
		panic("ProducerMock.SendFunc: method is nil but Producer.Send was just called")
	}
	callInfo := struct {
		Event T
	}{
		Event: event,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(event)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//
//	len(mockedProducer.SendCalls())
func (mock *ProducerMock[T]) SendCalls() []struct {
	Event T
} {
	var calls []struct {
		Event T
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}
