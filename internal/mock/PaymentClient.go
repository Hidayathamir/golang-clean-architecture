// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/Hidayathamir/golang-clean-architecture/internal/gateway/rest"
	"sync"
)

// Ensure, that PaymentClientMock does implement rest.PaymentClient.
// If this is not the case, regenerate this file with moq.
var _ rest.PaymentClient = &PaymentClientMock{}

// PaymentClientMock is a mock implementation of rest.PaymentClient.
//
//	func TestSomethingThatUsesPaymentClient(t *testing.T) {
//
//		// make and configure a mocked rest.PaymentClient
//		mockedPaymentClient := &PaymentClientMock{
//			GetStatusFunc: func(ctx context.Context, transactionID string) (string, error) {
//				panic("mock out the GetStatus method")
//			},
//			RefundFunc: func(ctx context.Context, transactionID string) (bool, error) {
//				panic("mock out the Refund method")
//			},
//		}
//
//		// use mockedPaymentClient in code that requires rest.PaymentClient
//		// and then make assertions.
//
//	}
type PaymentClientMock struct {
	// GetStatusFunc mocks the GetStatus method.
	GetStatusFunc func(ctx context.Context, transactionID string) (string, error)

	// RefundFunc mocks the Refund method.
	RefundFunc func(ctx context.Context, transactionID string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetStatus holds details about calls to the GetStatus method.
		GetStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TransactionID is the transactionID argument value.
			TransactionID string
		}
		// Refund holds details about calls to the Refund method.
		Refund []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TransactionID is the transactionID argument value.
			TransactionID string
		}
	}
	lockGetStatus sync.RWMutex
	lockRefund    sync.RWMutex
}

// GetStatus calls GetStatusFunc.
func (mock *PaymentClientMock) GetStatus(ctx context.Context, transactionID string) (string, error) {
	if mock.GetStatusFunc == nil {
		panic("PaymentClientMock.GetStatusFunc: method is nil but PaymentClient.GetStatus was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		TransactionID string
	}{
		Ctx:           ctx,
		TransactionID: transactionID,
	}
	mock.lockGetStatus.Lock()
	mock.calls.GetStatus = append(mock.calls.GetStatus, callInfo)
	mock.lockGetStatus.Unlock()
	return mock.GetStatusFunc(ctx, transactionID)
}

// GetStatusCalls gets all the calls that were made to GetStatus.
// Check the length with:
//
//	len(mockedPaymentClient.GetStatusCalls())
func (mock *PaymentClientMock) GetStatusCalls() []struct {
	Ctx           context.Context
	TransactionID string
} {
	var calls []struct {
		Ctx           context.Context
		TransactionID string
	}
	mock.lockGetStatus.RLock()
	calls = mock.calls.GetStatus
	mock.lockGetStatus.RUnlock()
	return calls
}

// Refund calls RefundFunc.
func (mock *PaymentClientMock) Refund(ctx context.Context, transactionID string) (bool, error) {
	if mock.RefundFunc == nil {
		panic("PaymentClientMock.RefundFunc: method is nil but PaymentClient.Refund was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		TransactionID string
	}{
		Ctx:           ctx,
		TransactionID: transactionID,
	}
	mock.lockRefund.Lock()
	mock.calls.Refund = append(mock.calls.Refund, callInfo)
	mock.lockRefund.Unlock()
	return mock.RefundFunc(ctx, transactionID)
}

// RefundCalls gets all the calls that were made to Refund.
// Check the length with:
//
//	len(mockedPaymentClient.RefundCalls())
func (mock *PaymentClientMock) RefundCalls() []struct {
	Ctx           context.Context
	TransactionID string
} {
	var calls []struct {
		Ctx           context.Context
		TransactionID string
	}
	mock.lockRefund.RLock()
	calls = mock.calls.Refund
	mock.lockRefund.RUnlock()
	return calls
}
