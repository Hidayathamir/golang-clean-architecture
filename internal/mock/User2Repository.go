// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/Hidayathamir/golang-clean-architecture/internal/entity"
	"github.com/Hidayathamir/golang-clean-architecture/internal/repository"
	"gorm.io/gorm"
	"sync"
)

// Ensure, that User2RepositoryMock does implement repository.User2Repository.
// If this is not the case, regenerate this file with moq.
var _ repository.User2Repository = &User2RepositoryMock{}

// User2RepositoryMock is a mock implementation of repository.User2Repository.
//
//	func TestSomethingThatUsesUser2Repository(t *testing.T) {
//
//		// make and configure a mocked repository.User2Repository
//		mockedUser2Repository := &User2RepositoryMock{
//			CreateFunc: func(ctx context.Context, db *gorm.DB, user *entity.User2) error {
//				panic("mock out the Create method")
//			},
//			FindByEmailFunc: func(ctx context.Context, db *gorm.DB, user *entity.User2, email string) error {
//				panic("mock out the FindByEmail method")
//			},
//			FindByIDFunc: func(ctx context.Context, db *gorm.DB, user *entity.User2, id string) error {
//				panic("mock out the FindByID method")
//			},
//			UpdateFunc: func(ctx context.Context, db *gorm.DB, user *entity.User2) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedUser2Repository in code that requires repository.User2Repository
//		// and then make assertions.
//
//	}
type User2RepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, db *gorm.DB, user *entity.User2) error

	// FindByEmailFunc mocks the FindByEmail method.
	FindByEmailFunc func(ctx context.Context, db *gorm.DB, user *entity.User2, email string) error

	// FindByIDFunc mocks the FindByID method.
	FindByIDFunc func(ctx context.Context, db *gorm.DB, user *entity.User2, id string) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, db *gorm.DB, user *entity.User2) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// User is the user argument value.
			User *entity.User2
		}
		// FindByEmail holds details about calls to the FindByEmail method.
		FindByEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// User is the user argument value.
			User *entity.User2
			// Email is the email argument value.
			Email string
		}
		// FindByID holds details about calls to the FindByID method.
		FindByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// User is the user argument value.
			User *entity.User2
			// ID is the id argument value.
			ID string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// User is the user argument value.
			User *entity.User2
		}
	}
	lockCreate      sync.RWMutex
	lockFindByEmail sync.RWMutex
	lockFindByID    sync.RWMutex
	lockUpdate      sync.RWMutex
}

// Create calls CreateFunc.
func (mock *User2RepositoryMock) Create(ctx context.Context, db *gorm.DB, user *entity.User2) error {
	if mock.CreateFunc == nil {
		panic("User2RepositoryMock.CreateFunc: method is nil but User2Repository.Create was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Db   *gorm.DB
		User *entity.User2
	}{
		Ctx:  ctx,
		Db:   db,
		User: user,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, db, user)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedUser2Repository.CreateCalls())
func (mock *User2RepositoryMock) CreateCalls() []struct {
	Ctx  context.Context
	Db   *gorm.DB
	User *entity.User2
} {
	var calls []struct {
		Ctx  context.Context
		Db   *gorm.DB
		User *entity.User2
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// FindByEmail calls FindByEmailFunc.
func (mock *User2RepositoryMock) FindByEmail(ctx context.Context, db *gorm.DB, user *entity.User2, email string) error {
	if mock.FindByEmailFunc == nil {
		panic("User2RepositoryMock.FindByEmailFunc: method is nil but User2Repository.FindByEmail was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Db    *gorm.DB
		User  *entity.User2
		Email string
	}{
		Ctx:   ctx,
		Db:    db,
		User:  user,
		Email: email,
	}
	mock.lockFindByEmail.Lock()
	mock.calls.FindByEmail = append(mock.calls.FindByEmail, callInfo)
	mock.lockFindByEmail.Unlock()
	return mock.FindByEmailFunc(ctx, db, user, email)
}

// FindByEmailCalls gets all the calls that were made to FindByEmail.
// Check the length with:
//
//	len(mockedUser2Repository.FindByEmailCalls())
func (mock *User2RepositoryMock) FindByEmailCalls() []struct {
	Ctx   context.Context
	Db    *gorm.DB
	User  *entity.User2
	Email string
} {
	var calls []struct {
		Ctx   context.Context
		Db    *gorm.DB
		User  *entity.User2
		Email string
	}
	mock.lockFindByEmail.RLock()
	calls = mock.calls.FindByEmail
	mock.lockFindByEmail.RUnlock()
	return calls
}

// FindByID calls FindByIDFunc.
func (mock *User2RepositoryMock) FindByID(ctx context.Context, db *gorm.DB, user *entity.User2, id string) error {
	if mock.FindByIDFunc == nil {
		panic("User2RepositoryMock.FindByIDFunc: method is nil but User2Repository.FindByID was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Db   *gorm.DB
		User *entity.User2
		ID   string
	}{
		Ctx:  ctx,
		Db:   db,
		User: user,
		ID:   id,
	}
	mock.lockFindByID.Lock()
	mock.calls.FindByID = append(mock.calls.FindByID, callInfo)
	mock.lockFindByID.Unlock()
	return mock.FindByIDFunc(ctx, db, user, id)
}

// FindByIDCalls gets all the calls that were made to FindByID.
// Check the length with:
//
//	len(mockedUser2Repository.FindByIDCalls())
func (mock *User2RepositoryMock) FindByIDCalls() []struct {
	Ctx  context.Context
	Db   *gorm.DB
	User *entity.User2
	ID   string
} {
	var calls []struct {
		Ctx  context.Context
		Db   *gorm.DB
		User *entity.User2
		ID   string
	}
	mock.lockFindByID.RLock()
	calls = mock.calls.FindByID
	mock.lockFindByID.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *User2RepositoryMock) Update(ctx context.Context, db *gorm.DB, user *entity.User2) error {
	if mock.UpdateFunc == nil {
		panic("User2RepositoryMock.UpdateFunc: method is nil but User2Repository.Update was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Db   *gorm.DB
		User *entity.User2
	}{
		Ctx:  ctx,
		Db:   db,
		User: user,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, db, user)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedUser2Repository.UpdateCalls())
func (mock *User2RepositoryMock) UpdateCalls() []struct {
	Ctx  context.Context
	Db   *gorm.DB
	User *entity.User2
} {
	var calls []struct {
		Ctx  context.Context
		Db   *gorm.DB
		User *entity.User2
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
